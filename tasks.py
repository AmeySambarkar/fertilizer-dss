# ... (Full tasks.py content from previous correct version) ...
import time, logging, os, traceback; from celery import Celery; from dotenv import load_dotenv; import pandas as pd; from backend_skeleton import featurize_field; from optimizer import optimize_npk_safety_first
load_dotenv(); CELERY_BROKER_URL = 'redis://redis:6379/0'; CELERY_RESULT_BACKEND = 'redis://redis:6379/0'; celery_app = Celery('tasks', broker=CELERY_BROKER_URL, backend=CELERY_RESULT_BACKEND); logging.basicConfig(level=logging.INFO); logger = logging.getLogger(__name__)
@celery_app.task(name="tasks.run_recommendation_pipeline")
def run_recommendation_pipeline(field_id: str, budget: float, crop: str) -> dict: logger.info(f"[JOB {celery_app.current_task.request.id}] Start: field={field_id}, crop={crop}, budget={budget}"); try: logger.info(f"[JOB] Calling featurize_field..."); X_df, X_dict = featurize_field(field_id, crop); logger.info(f"[JOB] Features loaded: {list(X_dict.keys())}"); features_for_optimizer = { k: v for k, v in X_dict.items() if k in ['soil_n', 'total_rainfall', 'gdd', 'soil_p', 'soil_k', 'ph'] }; logger.info(f"[JOB] Features for optimizer: {list(features_for_optimizer.keys())}"); logger.info(f"[JOB] Calling optimizer..."); opt_result = optimize_npk_safety_first(budget, features_for_optimizer); logger.info(f"[JOB] Optimizer status: {opt_result['optimizer_status']}"); final_mean = opt_result['yield_mean_at_optimum']; final_std = opt_result['yield_std_dev_at_optimum']; final_std = max(0, final_std); ci_half = 1.96 * final_std; response = {"field_id": field_id, "budget": budget, "crop": crop, "recommended_N": opt_result['N'], "recommended_P": opt_result['P'], "recommended_K": opt_result['K'], "expected_yield_mean": final_mean, "expected_yield_95_ci_low": max(0, final_mean - ci_half), "expected_yield_95_ci_high": final_mean + ci_half, "weather_summary": {"total_rainfall_mm": X_dict.get("total_rainfall"), "gdd": X_dict.get("gdd"), "mean_temp": X_dict.get("mean_temp")}, "optimizer_status": opt_result['optimizer_status'], "message": "Optimization successful." if opt_result['N'] > 0 or opt_result['P'] > 0 or opt_result['K'] > 0 else "Optimization failed or budget too low."}; logger.info(f"[JOB {celery_app.current_task.request.id}] Completed."); return response; except Exception as e: logger.error(f"[JOB FAILED]: {e}"); logger.error(traceback.format_exc()); raise e
